@startuml

@startuml

class RunServer {

    + handelReceiveMessages(server: Server): void
    + handleMessagingConnectionRequests(server: Server): void
    + handleFileConnectionRequests(server: Server): void
    + handleReceiveFiles(server: Server): void
    + runApp(): void
}

@enduml


class Server {
    + users: ArrayList<Pair<User, Boolean>>
    +userFileConnections: ArrayList<Pair<SocketHandler, Boolean>>
    + messageServer: ServerSocketHandler
    + fileServer: ServerSocketHandler
    + Server()
    + sendMsg(): void
    + sendToMultipleUsers(): void
    + sendToSingleUser(): void
    + addMessage(String, String, boolean): void
    + sendFile(File): void
    + sendToSingleUser(File): void
    + sendToMultipleUsers(File): void
}

interface DBConnection {
    + connect(): Connection
}

class MySQL {
    - url: String
    - username: String
    - password: String
    - dbname: String
    + MySQL(username: String, password: String, dbname: String)
    + connect(): Connection
}

class FileReceiver {
    - saveDir: String
    - inputStream: InputStream
    - file: File
    - filename: String
    - savePath: String
    - fileSize: long
    + FileReceiver(inputStream: InputStream)
    + start(): void
    + receive(): boolean
    + getFilename(): String
    + getInputStream(): InputStream
}

class FileSender {
    - outputStream: OutputStream
    - file: File
    + FileSender(file: File, outputStream: OutputStream)
    + send(): boolean
    + setFile(file: File): void
}

class MessageReceiver {
    - message: String
    - bufferedReader: BufferedReader
    + MessageReceiver(bufferedReader: BufferedReader)
    + start(): void
    + receive(): boolean
    + getMessage(): String
    + getBufferedReader(): BufferedReader
    + setBufferedReader(bufferedReader: BufferedReader): void
}

class MessageSender {
    - bufferedWriter: BufferedWriter
    - message: String
    + MessageSender(bufferedWriter: BufferedWriter)
    + MessageSender(bufferedWriter: BufferedWriter, message: String)
    + send(): boolean
    + getMessage(): String
    + setMessage(message: String): void
}

class Pair<T, U> {
    + first: T
    + second: U
    + Pair(first: T, second: U)
}

class ServerSocketHandler {
    - serverSocket: ServerSocket
    - port: int
    - socket: Socket
    - inputStream: InputStream
    - inputStreamReader: InputStreamReader
    - bufferedReader: BufferedReader
    - outputStream: OutputStream
    - outputStreamWriter: OutputStreamWriter
    - bufferedWriter: BufferedWriter
    + ServerSocketHandler()
    + ServerSocketHandler(port: int)
    + start(): void
    + receive(): String
    + send(msg: String): void
    + getServerSocket(): ServerSocket
    + getPort(): int
    + getSocket(): Socket
    + getInputStream(): InputStream
    + getInputStreamReader(): InputStreamReader
    + getBufferedReader(): BufferedReader
    + getOutputStream(): OutputStream
    + getOutputStreamWriter(): OutputStreamWriter
    + getBufferedWriter(): BufferedWriter
}

class SocketHandler {
    - host: String
    - port: int
    - socket: Socket
    - inputStream: InputStream
    - inputStreamReader: InputStreamReader
    - bufferedReader: BufferedReader
    - outputStream: OutputStream
    - outputStreamWriter: OutputStreamWriter
    - bufferedWriter: BufferedWriter
    + SocketHandler()
    + SocketHandler(socket: Socket)
    + SocketHandler(port: int)
    + setSocket(socket: Socket): void
    + getPort(): int
    + send(msg: String): void
    + receive(): String
    + getSocket(): Socket
    + getInputStream(): InputStream
    + getInputStreamReader(): InputStreamReader
    + getBufferedReader(): BufferedReader
    + getOutputStream(): OutputStream
    + getOutputStreamWriter(): OutputStreamWriter
    + getBufferedWriter(): BufferedWriter
}

class User {
    - name: String
    - messageSocketHandler: SocketHandler
    + User(name: String, socket: Socket)
    + setMessageSocketHandler(messageSocketHandler: SocketHandler): void
    + setSocketHandler(socket: Socket): void
    + getName(): String
    + getMessageSocketHandler(): SocketHandler
}

class RunClient {
    + proxy: boolean
    + proxyHost1: String
    + proxyHost2: String
    + port1: int
    + port2: int
    + messageThread(chatApp2: Client): void
    + fileThread(chatApp2: Client): void
    + connect(chatApp2: Client): void
    + runApp(username: String): void
}
class Client {
     - connectionStatus: boolean
    - proxy: boolean
    - username: String
    - messageSocketHandler: SocketHandler
    - fileSocketHandler: SocketHandler
    - bufferedWriter: BufferedWriter
    - fileOutputStream: OutputStream
    - proxyHost1: String
    - proxyPort1: int
    - proxyHost2: String
    - proxyPort2: int
    + Client(String)
    + setProxyConf(String, int, String, int): void
    + initDataCommunication(): void
    + setSocketHandlers(Socket, Socket): void
    + setSocketHandlers(SocketHandler, SocketHandler): void
    + setMessageSocketHandler(Socket): void
    + setMessageSocketHandler(SocketHandler): void
    + setFileSocketHandler(Socket): void
    + setFileSocketHandler(SocketHandler): void
    + sendMsg(): void
    + addMessage(String, String, boolean): void
    + addSuccessMessage(String): void
    + addErrorMessage(String): void
    + sendFile(File): void
    + setBufferedWriter(BufferedWriter): void
    + setFileOutputStream(OutputStream): void
    + reconnect(): void
    + reconnect(Socket, Socket): void
    + reconnectUsingProxy(): void
    + reconnectInBackground(boolean): void
    + connect(): void
    + connect(Socket, Socket): void
    + connect(int, int): void
    + error(): void
    + setProxy(boolean): void
}

RunServer --> Server
RunClient --> Client
RunServer --> MessageReceiver
Server --> MessageSender
RunServer --> FileReceiver
Server --> FileSender
Server --> Pair
Server --> ServerSocketHandler
Server --> SocketHandler
Server --> User
Client --> MessageSender
RunClient --> MessageReceiver
Client --> FileSender
RunClient --> FileReceiver
Client --> Pair
Client --> SocketHandler
Client --> ServerSocketHandler
Client --> User

DBConnection <|.. MySQL
Registration --> MySQL
Login --> MySQL

@enduml
